Progress Report
- Increment 3 -

1) Project Title and Description
- Stock Market Trading Bot
- The idea behind this project is to develop a web application where users can go in and create their 
  own portfolio of stocks from a handful of available options to be traded by a ML bot. The bot will 
  track 1 minute tickers of the stock data and day trade based on the assumption a stock will always 
  fall back to its mean price (if a stock deviates too much from its mean buy/sell that stock). Run a 
  simulation on this data and portfolio contents over the previous year and see what the earnings would 
  have looked like.

2) Accomplishments and overall project status during this increment
- 1. OU Model: In this increment, I finished the entiretly of the OU model which includes an OU class
  that will create a 4d dataframe of our profits and losses when linked to our trading signals and 
  framework files.
- 2. Framework & Backtesting: Finished the Framework.py file which declares necessary mathematic functions
  for developing our profit/loss dataframe reading in the info files and spits out price simulations.
- 3. Info Data: Finally implemented the ending of our trading signals file which calls the OU class and
  develops a 4d dataframe which is sent into Framework.py for backtesting.
- 4. Final Model Training: Ran all of these files together to create a bot which can be interacted with
  to pull data and then create the necessary files and be saved to spit out price simulations when called.
- 5. Price Simulation: Implemented the final feature of the backend which generates a graph of the user's
  profits over 2022 when choosing to buy a specific stock.
- 6. 25% ROI: After training the bot and running a price simulation for Google over 2022, I recieved a 25% 
  return on investment which is over 2x as much someone would recieve on average investing in the S&P 500.

3) Challenges, changes in the plan and scope of the project and things that went wrong during this
increment
- 1. Linear Regression: Had a lot of issues on the backend when trying to calculate the linear regression.
  Kept getting the same error where all x values were the same for both class datasets. This ended up being
  an easy fix which was completely overlooked in the constructor for our OU class which accidentally set both
  dataset 1 and 2 to the values of dataset 1.
- 2. Math Functions: There were many math functions like calculated the sharpe and sortino ratios which were 
  necessary to create our profit/loss dataframe. These math functions were rather hard to develop since it is
  a side of programming I am not necessarily used to.
- 3. Profit/Loss Dataframe: As mentioned above, creating the profit/loss dataframe was a big challenge with
  this increment. The idea of a 4 dimensional dataframe is incomprehensible and therefore the info files 
  cannot be opened on our computers. This made it a struggle to make sure that the data I was feeding
  into the bot was completely accurate and did not have any major errors.
- 4. Backend & Frontend Split: Due to inadequate planning and developmental procedures, the backend and
  frontend for our project are not fully connected. You can still run this project using just the backend
  and get an idea of what it would look like on the frontend when connected.

4) Plans for the next increment
- This was the final increment.
