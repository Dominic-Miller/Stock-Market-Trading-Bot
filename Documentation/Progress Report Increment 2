Progress Report
- Increment 2 -
Group #14

1) Team Members
- Kian Haghighi (FSU ID: kh21e, GitHub ID: KianHaghighi)
- Dominic Miller (FSU ID: dgm21, Github ID: Dominic-Miller)
- Edwin Laguerre (FSU ID: el21l, Github ID: Edwinlaguerre)
- Ilya Kogan (FSU ID: ik22g, Github ID: kogan782)

2) Project Title and Description
- Stock Market Trading Bot
- The idea behind this project is to develop a web application where users can go in and create their 
  own portfolio of stocks from a handful of available options to be traded by a ML bot. The bot will 
  track 1 minute tickers of the stock data and day trade based on the assumption a stock will always 
  fall back to its mean price (if a stock deviates too much from its mean buy/sell that stock). Run a 
  simulation on this data and portfolio contents over the previous year and see what the earnings would 
  have looked like.

3) Accomplishments and overall project status during this increment
- 1. Data Dump: In this increment, all of the necessary data that will be needed to train the 
  bot was retrieved and has been placed into a new data dump folder in the backend code. We
  will use this data for stocks with multiple classes to compare the ticker data to one another
  to predict divergence and convergence in our model.
- 2. Trading Signals: The trading signals were developed alone with the processed data including
  price residuals and buy/sell indicators. This will allow our bot to predict to either buy or 
  sell the stock, then we will tell the ML algorithm if it is correct so it can adjust it's 
  biases and future predictions. This is a very big step in the process of training our bot.
- 3. User authentication and registration: Users can know register themselves as users as well 
  as login. Users can
  also see the amount of money that is currently in their profile.
- 4. Profile Page: Users can see how much money is in their account and how much the funds in 
  their account have changed.

4) Challenges, changes in the plan and scope of the project and things that went wrong during this
increment
- 1. Data processing error: Still stuggling with an error where I can only run the data on my own computer.
  Right now, the file path is set to my computer's path where the file is stored, however when other users
  run this program we want to make it ambiguous so the path can be accessed by anyone.
- 2. Developing trading signals: This was a difficult process in this increment. After figuring out we 
  would need two separate data sets, we needed to develop some trading signals to train the bot with.
  These would be used to predict the convergence or divergence of the two classes. By implementing these,
  we will be able to train our bot effeciently based on many factors such as price and volume.
- 3. SVM model requires two data sets: This is the largest change from our original plan on the backend.
  Originally, we thought we would be able to train the bot to predict prices for any stock, however many
  algorithms used by hedge funds already do this so the methods are not effective. Rather, we have to 
  use two separate data sets to compare to one another and predict convergence or divergence. After reading
  more about the algorithms hedge funds use, it became obvious that we would only be able to use stocks that
  have two classes to begin with since we will easily be able to predict convergence and divergence this way.

5) Team Member Contribution for this increment
- Dominic Miller: A) Wrote the majority of the progress report document including the project desription,
  data dump and trading signals accomplishments, data processing error, trading signals challenge, and 
  multiple data sets challenges and change of scope, and the plans for the next increment along with this 
  part. B) Determined and wrote two of the new functional requirements (data API and trading signals) in 
  the requirements and design document along with the use case and class diagrams. C) Wrote the entirety 
  of edits to the implementation and testing document since the last increment along with the new parts 
  included for increment 2 including the execution-based functional testing, execution-based non-functional 
  testing, and non-executional-based testing parts. D) Wrote the entirety of our backend source code 
  including the data dump, get_data.py, and trading_signals.py python code files. E) Did the intro and 
  overview of the current project in our increment's video. Also discussed the state of the backend,
  what was accomplished on the backend, a demo of the backend, our changes of scope, and what we plan
  to accomplish in the next increment on the backend.

- Kian Haghighi: A) Wrote about the improvements to the front-end, including user authentication and 
  registration and profile page B) Added the profile page functional requirement as well as edited the 
  user authentication and user authorization functional requirement. C) Added Django and Sqlite to the 
  "2. Platforms, APIs, Databases, and other technologies used" section along with the various descriptions
  D) Wrote all of the code for the user authentication and registration in the front-end source code with 
  Django. Wrote the code for the profile page. E) Created the section of the video that describes the code
  added for user authentication and registration and profile view and show the functionality.

- Edwin Laguerre: A) Did not write much of the progress report besides the team contribution section. B) Did 
  not write much of the design document for this increment. C) Did not write anything in the implementation 
  and testing document since I have yet to implement any code as I have spent my time familiarizing myself 
  with Python and the code we already have. D) As stated above, have not written any of the source code yet 
  and have been familiarizing myself with what we have. E) Talked about the plans for the backend in the video.

- Ilya Kogan: A) B) C) D) E)

6) Plans for the next increment
- Since the next increment is our last, we plan to fully finish the bot by developing the OU model and
  framework to train the ML algorithm. On the front end, we still need to finish creating our web application
  and finally connect the backend to the front end so the application will run smoothly. Any time a user 
  picks out some stocks for their portfolio, they will be promted to buy a certain amount of each stock
  and then the algorithm will run and display a graph of the profits from the bot vs. the profits without
  the bot.

7) Link to video
https://youtu.be/NxRUJLIZQCQ
